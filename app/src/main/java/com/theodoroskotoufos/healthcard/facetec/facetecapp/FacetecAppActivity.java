package com.theodoroskotoufos.healthcard.facetec.facetecapp;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;

import androidx.databinding.DataBindingUtil;

import com.facetec.sdk.FaceTecSDK;
import com.theodoroskotoufos.healthcard.MainActivity;
import com.theodoroskotoufos.healthcard.R;
import com.theodoroskotoufos.healthcard.databinding.ActivityFacetecAppBinding;
import com.theodoroskotoufos.healthcard.facetec.Processors.Config;
import com.theodoroskotoufos.healthcard.facetec.Processors.NetworkingHelpers;
import com.theodoroskotoufos.healthcard.facetec.Processors.PhotoIDMatchProcessor;
import com.theodoroskotoufos.healthcard.facetec.Processors.Processor;

import org.jetbrains.annotations.NotNull;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.Objects;

import okhttp3.Call;
import okhttp3.Callback;

import static java.util.UUID.randomUUID;

public class FacetecAppActivity extends Activity {
    public ActivityFacetecAppBinding activityMainBinding;
    public FacetecAppUtilities utils = new FacetecAppUtilities(this);
    public Processor latestProcessor;
    String latestExternalDatabaseRefID = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        configureInitialSampleAppUI();

        // Initialize FaceTec SDK
        Config.initializeFaceTecSDKFromAutogeneratedConfig(this, new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
                if (successful) {
                    Log.d("FaceTecSDKSampleApp", "Initialization Successful.");
                }

            }
        });

        FaceTecSDK.setCustomization(Config.currentCustomization);


        photoID();
    }


    public void photoID() {
        utils.fadeOutMainUIAndPrepareForFaceTecSDK(() -> getSessionToken(sessionToken -> {
            latestExternalDatabaseRefID = "android_sample_app_" + randomUUID();
            latestProcessor = new PhotoIDMatchProcessor(sessionToken, FacetecAppActivity.this);
        }));
    }

    // When the FaceTec SDK is completely done, you receive control back here.
    // Since you have already handled all results in your Processor code, how you proceed here is up to you and how your App works.
    // In general, there was either a Success, or there was some other case where you cancelled out.
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (latestProcessor == null) {
            return;
        }

        utils.fadeInMainUI();
        Intent intent = new Intent(this, MainActivity.class);

        // At this point, you have already handled all results in your Processor code.
        if (this.latestProcessor.isSuccess()) {
            utils.displayStatus("Success");
            intent.putExtra("flag", "profile");

        } else {
            utils.displayStatus("Session exited early, see logs for more details.");

            // Reset the enrollment identifier.
            latestExternalDatabaseRefID = "";

            intent.putExtra("flag", "create");
        }

        startActivity(intent);

    }


    public String getLatestExternalDatabaseRefID() {
        return latestExternalDatabaseRefID;
    }

    public void configureInitialSampleAppUI() {
        activityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_facetec_app);
        utils.displayStatus("Initializing...");


    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
        utils.showSessionTokenConnectionText();

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if (!Objects.equals(e.getMessage(), NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
                    utils.handleErrorGettingServerSessionToken();
                }
            }

            @Override
            public void onResponse(@NotNull Call call, @NotNull okhttp3.Response response) throws IOException {
                assert response.body() != null;
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if (responseJSON.has("sessionToken")) {
                        utils.hideSessionTokenConnectionText();
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    } else {
                        utils.handleErrorGettingServerSessionToken();
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                    utils.handleErrorGettingServerSessionToken();
                }
            }
        });
    }

    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }
}
